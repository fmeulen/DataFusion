using DataFrames
using GaussianDistributions, LinearAlgebra
using Distributions
using StaticArrays
using CSV
using PDMats
using DelimitedFiles
using Setfield

#using ProfileView
#using Profile
#using BenchmarkTools
#Profile.init(); @profview

cd(@__DIR__)

const implicit = true
include("ffbs.jl")
include("fdefs.jl")

## Lorinc example: read true data, ensure log-chlorA, log-radiation and temperature are given
t, Œî, conc, typeobs, lrad_temp = readdata("../../csv/observation_lograd_temp.csv")
# change to logconcentration
logconc = map( x-> log.(x), conc)
####################################################
Œ± = 14.0
J = 5
Œæ = vcat([0.5, 1.0, 2.0], zeros(nbasis(J)-3))
œÉ2 = .1^2
œàÃÑ = 0.01 # should be <1
œà = 0.01
Œ∑ = 658/8005 # apriori expect water measurement to be more accurate, i.e. œà1 smaller than œà2
œÅ = [0.0, 0.0]

####################################################

# initialise ùí´
ùí´ = DF(Œ±,  Œæ,  œÉ2, œàÃÑ, œà, t, Œî, typeobs, J, Œ∑, lrad_temp, œÅ)


propœÉ_Œ±=0.2; propœÉ_œàÃÑ=0.5; prior_Œ± = Exponential(10.0); prior_œàÃÑ = Uniform(0,1);
AœÉ=0.1; BœÉ=0.1; Aœà=0.1; Bœà=0.1; priorvarŒæ = 10.0
priorvarŒæœÅ = 10.0#

y = logconc
ITER = 10_000
Œ∏, X, ùí´, accperc_Œ±, = mcmc(ùí´, logconc; ITER = ITER, printskip=25, saveskip=50)

# using Profile
# Profile.clear()
# @profile
# Juno.profiler()

if length(X) >=2
    BI = div(length(X),2)
    postmean_paths = ec1([mean(map(x->x[i],X[BI:length(X)-1])) for i in eachindex(X[1])])
end

## postprocessing

writedlm("../../csv/postmean_paths.csv", postmean_paths)

using Plots
### traceplots
# parameters(ùí´::DF) = (ùí´.Œ±, ùí´.Œæ, ùí´.œÉ2, ùí´.œàÃÑ, ùí´.œà, ùí´.œÅ)
p1 = plot( ec(map(x->x[1],Œ∏),1),label="Œ±")
p2 = plot( ec(map(x->x[2],Œ∏),1), label="Œæ1")
p3 = plot( ec(map(x->x[3],Œ∏),1), label="œÉ¬≤")
p4 = plot( ec(map(x->x[4],Œ∏),1), label="œàÃÑ")
p5 = plot( ec(map(x->x[5],Œ∏),1), label="œà")
p6 = plot( ec(map(x->x[6],Œ∏),1), label="œÅ‚ÇÅ")

l = @layout [a b c ; d e f]
plot(p1, p2, p3, p4, p5, p6, layout = l)

pX1 = plot(ec1(X[1]))
pXhalf = plot(ec1(X[div(length(X),2)]))
pXend = plot(ec1(X[length(X)-1]))
plot(pX1, pXhalf, pXend, layout=@layout [a;b;c])


# BI = div(ITER,2)
# using RCall
# include("postprocessing.jl")
