acf(x)
pacf(x)
n <- 2000
x <- arima.sim(list(ar=c(0.6,-0.3)),n,sd=0.3)
acf(x)
pacf(x)
n <- 2000
x <- arima.sim(list(ar=c(0.6,-0.3), ma=0.5),n,sd=0.3)
plot.ts(x)
acf(x)
pacf(x)
# chapter 5
x <- arima.sim(list(ar=0.8),50)
sarima.for(x, 10, 1, 0, 0)
?sarima.for
# chapter 5
x <- arima.sim(list(ar=0.8, ma =-0.7),50)
sarima.for(x, 10, 1, 0, 1)
# use setwd to set the working directory
library(forecast)
library(tseries)
library(astsa)
library(fGarch)
library(quantmod)
# chapter 3
x <- rnorm(100)
acf(x)
# chapter 6
getSymbols("AAPL",scr='yahoo')
# Extract closing prices of AAPL, from 2012 onwards
cl_AAPL <- Cl(AAPL['2012::'])
# Compute log-returns
lr_AAPL <- diff(log(cl_AAPL))
plot(cl_AAPL,col='blue')
plot(lr_AAPL,col='blue')
tsdisplay(lr_AAPL)
par(mfrow=c(1,2))
hist(lr_AAPL,breaks='FD',prob=TRUE,xlab="",ylab="",main="")
y <- as.numeric(lr_AAPL)
qqnorm(y); qqline(y,col='red')
Box.test(y,lag=10,type='Ljung-Box')
Box.test(y^2,lag=10,type='Ljung-Box')
kurtosis(y,na.rm=TRUE) # excess kurtosis
spec <- garchSpec(model = list(omega=5, alpha = 0.4, beta = 0))
x <- garchSim(spec, n = 500)
gfit <- garchFit(~garch(1,0),data=x)
summary(gfit)
plot(gfit)
getSymbols('PHG')
price <- Cl(PHG['2011-01-01::2013-10-28'])
lr <- diff(log(price))[-1] # remove first element, as it is NA
acf(lr)
plot(price)
par(mfrow=c(1,1))
price <- Cl(PHG['2011-01-01::2013-10-28'])
plot(price)
lr <- diff(log(price))[-1] # remove first element, as it is NA
acf(lr)
plot(lr)
acf(lr)
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,de=F,no.con=T)$fit
summary(ma_fit)
plot(lr)
acf(lr)
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,de=F,no.con=T)$fit
?sarima
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,no.con=T)$fit
summary(ma_fit)
spec <- garchSpec(model = list(omega=5, alpha = 0.4, beta = 0))
x <- garchSim(spec, n = 500)
plot.ts(x)
spec <- garchSpec(model = list(omega=5, alpha = 0.4, beta = 0))
x <- garchSim(spec, n = 5000)
plot.ts(x)
spec <- garchSpec(model = list(omega=50, alpha = 0.4, beta = 0))
x <- garchSim(spec, n = 5000)
plot.ts(x)
spec <- garchSpec(model = list(omega=50, alpha = 0.7, beta = 0))
x <- garchSim(spec, n = 5000)
plot.ts(x)
spec <- garchSpec(model = list(omega=50, alpha = 0.7, beta = 0))
x <- garchSim(spec, n = 5000)
plot.ts(x)
acf(x)
spec <- garchSpec(model = list(omega=5, alpha = 1.7, beta = 0))
x <- garchSim(spec, n = 500)
plot.ts(x)
plot.ts(x)
plot.ts(x)
pdf("myplot.pdf")
plot.ts(x)
x
spec <- garchSpec(model = list(omega=5, alpha = 1.7, beta = 0))
x <- garchSim(spec, n = 500)
x
spec <- garchSpec(model = list(omega=5, alpha = 0.7, beta = 0))
x <- garchSim(spec, n = 500)
plot.ts(x)
acf(x)
spec <- garchSpec(model = list(omega=5, alpha = 0.7, beta = 0))
x <- garchSim(spec, n = 5000)
acf(x)
plot.ts(x)
pdf("mfigure.pdf")
plot.ts(x)
dev.off()
getwd()
spec <- garchSpec(model = list(omega=5, alpha = 0.97, beta = 0))
x <- garchSim(spec, n = 5000)
plot.ts(x)
acf(x)
var(x)
5/(1-0.97)
x
sd(x)
sqrt(5/(1-0.97))
spec <- garchSpec(model = list(omega=5, alpha = 0.97, beta = 0))
x <- garchSim(spec, n = 5000)
5/(1-0.97)
sd(x)^2
spec <- garchSpec(model = list(omega=5, alpha = 0.97, beta = 0))
x <- garchSim(spec, n = 50000)
sd(x)^2
5/(1-0.97)
spec <- garchSpec(model = list(omega=5, alpha = 0.6, beta = 0))
x <- garchSim(spec, n = 50000)
5/(1-0.6)
sd(x)^2
spec <- garchSpec(model = list(omega=5, alpha = 0.6, beta = 0))
x <- garchSim(spec, n = 50000)
acf(x)
pacf(x)
acf(x^2)
pacf(x^2)
spec <- garchSpec(model = list(omega=5, alpha = 0.6, beta = 0))
x <- garchSim(spec, n = 50000)
acf(x)
pacf(x)
acf(x^2)
pacf(x^2)
getSymbols('PHG')
price <- Cl(PHG['2011-01-01::2013-10-28'])
plot(price)
lr <- diff(log(price))[-1] # remove first element, as it is NA
plot(lr)
acf(lr)
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,de=F,no.con=T)$fit
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,no.con=T)$fit
res <- residuals(ma_fit)
acf(res)
qqnorm(res);qqline()
qqnorm(res);qqline(res)
acf(res^2)
pacf(res^2)
ma_fit <- sarima(lr,0,0,1,de=F,no.con=T)$fit
summary(ma_fit)
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,de=F,no.con=T)$fit
# fit MA(1) model
ma_fit <- sarima(lr,0,0,1,no.con=T)$fit
g_fit <- garchFit(~ arma(0,1) + garch(1,0),data=lr,
include.mean=FALSE,trace=F)
plot(g_fit,which=11) # ACF of Squared Standardized Residuals
plot(g_fit)
g_fit <- garchFit(~ arma(0,1) + garch(3,0),data=lr,
include.mean=FALSE,trace=F)
summary(g_fit)
plot(g_fit)
g_fit2 <- garchFit(~ arma(0,1) + garch(3,0),data=lr,
include.mean=FALSE,trace=F,cond.dist="std")
plot(g_fit2)
summary(g_fit2)
library(pracma)
?expint
expint_E1(1.0)
expint_E1(-1.0)
?arima.sim
arima.sim(n=50, list(ma=0.2), rand.gen=rnorm(0,sqrt(0.5)))
arima.sim(n=50, list(ma=0.2), rand.gen=rnorm(0,sqrt(0.5)))
arima.sim(n=50, list(ma=0.2), sd=sqrt(0.5))
arima.sim(n=50, list(ma=0.02), sd=sqrt(0.5))
x<-arima.sim(n=50, list(ma=0.02), sd=sqrt(0.5))
sd(x)
x<-arima.sim(n=5000, list(ma=0.02), sd=sqrt(0.5))
sd(x)
x<-arima.sim(n=5000, list(ma=0.002), sd=sqrt(0.5))
sd(x)
library(tidyverse)
?geom_abline
shiny::runGitHub('jarad/one_parameter_conjugate')
library(tidyverse)
library(GGally)
theme_set(theme_bw(base_size = 12))
#  Exercise 4.20
# generate some "true" thetas
n <- 100
theta0 <- runif(n,0,1000)
theta0
x<- rep(0,n)
for (i in 1:n) x[i] <- runif(1,0,theta0[i])
x
# compute estiamtes
mle <- x
ebayes <- x+mean(x)
lambda_hyp <- 1 # hyperpar in prior
bayes <- x+1/lambda_hyp
mse.mle <- sum((mle-theta0)^2)
mse.ebayes <- sum((ebayes-theta0)^2)
mse.bayes <- sum((bayes-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
lambda_hyp <- 10 # hyperpar in prior
bayes <- x+1/lambda_hyp
mse.mle <- sum((mle-theta0)^2)
mse.ebayes <- sum((ebayes-theta0)^2)
mse.bayes <- sum((bayes-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
lambda_hyp <- 00.10 # hyperpar in prior
bayes <- x+1/lambda_hyp
mse.mle <- sum((mle-theta0)^2)
mse.ebayes <- sum((ebayes-theta0)^2)
mse.bayes <- sum((bayes-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
lambda_hyp <- 0.010 # hyperpar in prior
bayes <- x+1/lambda_hyp
mse.mle <- sum((mle-theta0)^2)
mse.ebayes <- sum((ebayes-theta0)^2)
mse.bayes <- sum((bayes-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
d <- data.frame(i=rep(1:n,3),value=c(mle-theta0,ebayes-theta0,bayes-theta0),type=rep(c('mle','ebayes','bayes'),each=n))
ggplot(data=d, aes(x=i,y=value,colour=type)) + geom_point()+facet_wrap(~type)+
theme(legend.position="bottom")+ geom_hline(yintercept=0,size=1.1) +
ggtitle("estimate-theta0") + ylab("")
alpha = 0.1
beta = 2
IT <- 10000
lambda <- rep(0,IT)
theta <- matrix(0,IT,n) # each row contains an MCMC iteration
theta[1,]  <- x  # initialise at mle
for (it in 2:IT)
{  lambda[it] = rgamma(1,shape=2*n+alpha, rate= beta+sum(theta[it-1,]))
theta[it,] = x + rexp(1,rate=lambda[it])
}
# postprocessing
posteriormean <-   as.tibble(theta) %>% filter(row_number() > IT/2) %>% summarise_all(mean)
posteriormean <- as.numeric(posteriormean[1,])
mse.posteriormean <- sum((posteriormean-theta0)^2)
posteriormean <-   as_tibble(theta) %>% filter(row_number() > IT/2) %>% summarise_all(mean)
posteriormean <- as.numeric(posteriormean[1,])
mse.posteriormean <- sum((posteriormean-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
mse.posteriormean
dd <- data.frame(i=rep(1:n,4),value=
c(mle-theta0,ebayes-theta0,bayes-theta0,posteriormean-theta0),
type=rep(c('mle','ebayes','bayes','hier.bayes'),each=n))
ggplot(data=dd, aes(x=i,y=value,colour=type)) + geom_point()+facet_wrap(~type,nrow=1)+
theme(legend.position="none")+ geom_hline(yintercept=0,size=1) +   ggtitle("estimate-theta0") + ylab("")
dd %>% filter(i<=10) %>% ggplot(aes(x=i,y=value,colour=type)) + geom_jitter(size=1.5,width=0.1, height=0)+
geom_hline(yintercept=0,size=1) +   ggtitle("estimate-theta0 (only first 10 theta[i])") +
ylab("")+ scale_x_continuous(breaks = seq(1, 10, by=1))
# postprocessing
bayeshier <-   as_tibble(theta) %>% filter(row_number() > IT/2) %>% summarise_all(mean)
bayeshier <- as.numeric(bayeshier[1,])
mse.bayeshier <- sum((bayeshier-theta0)^2)
mse.mle
mse.ebayes
mse.bayes
mse.bayeshier
dd <- data.frame(i=rep(1:n,4),value=
c(mle-theta0,ebayes-theta0,bayes-theta0,posteriormean-theta0),
type=rep(c('mle','ebayes','bayes','hier.bayes'),each=n))
ggplot(data=dd, aes(x=i,y=value,colour=type)) + geom_point()+facet_wrap(~type,nrow=1)+
theme(legend.position="none")+ geom_hline(yintercept=0,size=1) +   ggtitle("estimate-theta0") + ylab("")
ss <- function(x) { sum(x^2) }
sum((mle-theta0)^2)
ss(mle-theta0)
mse.mle <- ss(mle-theta0)
mse.ebayes <- ss(ebayes-theta0)
mse.bayes <- ss((bayes-theta0)
mse.mle <- ss(mle-theta0)
mse.ebayes <- ss(ebayes-theta0)
mse.bayes <- ss(bayes-theta0)
mse.mle
mse.ebayes
mse.bayes
library(tidyverse)
library(GGally)
theme_set(theme_bw(base_size = 12))
#  Exercise 4.20
# generate some "true" thetas
n <- 100
theta0 <- runif(n,0,1000)
# generate data
x<- rep(0,n)
for (i in 1:n) x[i] <- runif(1,0,theta0[i])
# compute estiamtes
mle <- x
ebayes <- x+mean(x)
lambda_hyp <- 0.010 # hyperpar in prior
bayes <- x+1/lambda_hyp
ss <- function(x) { sum(x^2) }
mse.mle <- ss(mle-theta0)
mse.ebayes <- ss(ebayes-theta0)
mse.bayes <- ss(bayes-theta0)
mse.mle
mse.ebayes
mse.bayes
mse.bayeshier <- ss(bayeshier-theta0)
library(tidyverse)
library(GGally)
theme_set(theme_bw(base_size = 12))
#  Exercise 4.20
# generate some "true" thetas
n <- 100
theta0 <- runif(n,0,1000)
# generate data
x<- rep(0,n)
for (i in 1:n) x[i] <- runif(1,0,theta0[i])
# compute estiamtes
mle <- x
ebayes <- x+mean(x)
lambda_hyp <- 0.010 # hyperpar in prior
bayes <- x+1/lambda_hyp
ss <- function(x) { sum(x^2) }
mse.mle <- ss(mle-theta0)
mse.ebayes <- ss(ebayes-theta0)
mse.bayes <- ss(bayes-theta0)
mse.mle
mse.ebayes
mse.bayes
# visualise results
d <- data.frame(i=rep(1:n,3),value=c(mle-theta0,ebayes-theta0,bayes-theta0),type=rep(c('mle','ebayes','bayes'),each=n))
ggplot(data=d, aes(x=i,y=value,colour=type)) + geom_point()+facet_wrap(~type)+
theme(legend.position="bottom")+ geom_hline(yintercept=0,size=1.1) +
ggtitle("estimate-theta0") + ylab("")
cat('1/(sample average) equals:', 1/mean(x))
###### fully bayesian with Gibbs sampling
# specify hyperpars of prior
alpha = 0.1
beta = 2
IT <- 10000
lambda <- rep(0,IT)
theta <- matrix(0,IT,n) # each row contains an MCMC iteration
theta[1,]  <- x  # initialise at mle
for (it in 2:IT)
{  lambda[it] = rgamma(1,shape=2*n+alpha, rate= beta+sum(theta[it-1,]))
theta[it,] = x + rexp(1,rate=lambda[it])
}
# postprocessing
bayeshier <-   as_tibble(theta) %>% filter(row_number() > IT/2) %>%
summarise_all(mean)
bayeshier <- as.numeric(bayeshier[1,])
mse.bayeshier <- ss(bayeshier-theta0)
mse.mle
mse.ebayes
mse.bayes
mse.bayeshier
dd <- data.frame(i=rep(1:n,4),value=
c(mle-theta0,ebayes-theta0,bayes-theta0,posteriormean-theta0),
type=rep(c('mle','ebayes','bayes','hier.bayes'),each=n))
ggplot(data=dd, aes(x=i,y=value,colour=type)) + geom_point()+facet_wrap(~type,nrow=1)+
theme(legend.position="none")+ geom_hline(yintercept=0,size=1) +   ggtitle("estimate-theta0") + ylab("")
# only show first 10 theta[i]
dd %>% filter(i<=10) %>% ggplot(aes(x=i,y=value,colour=type)) + geom_jitter(size=1.5,width=0.1, height=0)+
geom_hline(yintercept=0,size=1) +   ggtitle("estimate-theta0 (only first 10 theta[i])") +
ylab("")+ scale_x_continuous(breaks = seq(1, 10, by=1))
# verify chain by inspecting traceplots
diterates <- data.frame(iterate=1:IT,theta2=theta[,2],theta20=theta[,20],lambda=lambda)
diterates %>% filter(row_number() %in% seq(1,IT,by=10)) %>% gather(key=par,value=y,theta2,theta20,lambda) %>%
ggplot() + geom_path(aes(x=iterate,y=y)) + facet_grid(par~.,scales='free')+ ggtitle("traceplots for a few parameters")
library(tidyverse)
library(readxl)
setwd("~/Sync/DOCUMENTS/Onderwijs/time series/wi3411tu 2020/cijfers/nov2020")
theme_set(theme_minimal())
d <- read_csv("TS_cijfers.csv")
#View(d)
coursename <- 'Results wi3411tu resit November 2020'
maxscore <-  8 + 4 + 3 + 2 +  6
print(maxscore)
d <- d %>% dplyr::filter(score>0.1) %>%
mutate(cijfer=1+(9/maxscore)*score, cijfer_afgerond=round(2*cijfer,0)/2)
d <- d %>% mutate(`Adjusted Final Grade Numerator`=10*cijfer_afgerond,
`Adjusted Final Grade Denominator`=100)
#tableresults <- d %>% select(`First Name`,`Last Name`,score,cijfer,cijfer_afgerond) %>% arrange(cijfer_afgerond)
tableresults <- d %>% select(`FirstName`,`LastName`,score,cijfer,cijfer_afgerond) %>% arrange(cijfer_afgerond)
View(d)
d %>% filter(OrgDefinedId %in% c(4656547, 4467825, 4864476,4794117))
dsub <- d %>% filter(OrgDefinedId %in% c(4656547, 4467825, 4864476,4794117))
View(dsub)
1+9 * c(21,10.5,22,13)/maxscore
1+9 * c(21,10.5,22,12.5)/maxscore
library(readr)
library(tidyverse)
library(DataExplorer)
library(tibble)
library(lubridate)
theme_set(theme_light())
setwd("~/.julia/dev/DataFusion/processing_in_r")
dorig <-  read_csv("daily_data.csv",
col_types = cols(chl = col_double())) %>% rename(chl_water=concentration_of_chlorophyll_in_water)
setwd("~/.julia/dev/DataFusion/figs")
dorig <-  read_csv("~/.julia/dev/DataFusion/csv/daily_data.csv",
col_types = cols(chl = col_double())) %>% rename(chl_water=concentration_of_chlorophyll_in_water)
d <- dorig %>% gather(chl, chl_water,key='meastype', value=y)
#View(d)
glimpse(d)
d %>% ggplot(aes(x=time, y=y,colour=meastype)) + geom_point() + facet_wrap(~meastype,ncol=1)
d %>% filter(meastype=='chl') %>% ggplot(aes(x=time, y=y,colour=meastype)) + geom_point() + facet_wrap(~meastype)
firsttime <- "1976-01-01"
elapsed <- interval(firsttime, d$time) %>%as.numeric('years')
d <- d %>% mutate(time_elapsed = elapsed)
pl <- d %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.6) +
facet_wrap(~meastype,ncol=1,scales='free') + ylab("concentration")
pl
pdf("~/.julia/dev/DataFusion/figs/vis_data.pdf",width=7,height=5)
dev.off()
pdf("~/.julia/dev/DataFusion/figs/vis_data.pdf",width=7,height=5)
pl
dev.off()
elapsed2 <- interval(firsttime, dorig$time) %>%as.numeric('years')
dorig <- dorig %>% mutate(time_elapsed=elapsed2, chl_water_meas = !is.na(chl_water), chl_meas=!is.na(chl)) %>%
unite("obsscheme", chl_water_meas, chl_meas) %>%
mutate(obsscheme=fct_recode(obsscheme,obs1="TRUE_FALSE", obs2="FALSE_TRUE", obs3="TRUE_TRUE")) %>%
arrange(time_elapsed)
glimpse(dorig)
dorig %>% filter(obsscheme=='type3')
#write_csv(dorig, paste0(getwd(),"/periodic1d/observations.csv"))
#unique(dorig$obsscheme)
# include posterior mean in figure
pm <- read_csv("~/.julia/dev/DataFusion/csv/postmean_paths.csv", col_names = FALSE)
d <- d %>% mutate(postmean=rep(pm$X1,2)) %>%  mutate(t1 = time_elapsed %% 1)
pm
library(readr)
library(tidyverse)
library(DataExplorer)
library(tibble)
library(lubridate)
theme_set(theme_light())
setwd("~/.julia/dev/DataFusion/figs")
dorig <-  read_csv("~/.julia/dev/DataFusion/csv/daily_data.csv",
col_types = cols(chl = col_double())) %>% rename(chl_water=concentration_of_chlorophyll_in_water)
d <- dorig %>% gather(chl, chl_water,key='meastype', value=y)
#View(d)
glimpse(d)
d %>% ggplot(aes(x=time, y=y,colour=meastype)) + geom_point() + facet_wrap(~meastype,ncol=1)
d %>% filter(meastype=='chl') %>% ggplot(aes(x=time, y=y,colour=meastype)) + geom_point() + facet_wrap(~meastype)
firsttime <- "1976-01-01"
elapsed <- interval(firsttime, d$time) %>%as.numeric('years')
d <- d %>% mutate(time_elapsed = elapsed)
pl <- d %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.6) +
facet_wrap(~meastype,ncol=1,scales='free') + ylab("concentration")
pl
elapsed2 <- interval(firsttime, dorig$time) %>%as.numeric('years')
dorig <- dorig %>% mutate(time_elapsed=elapsed2, chl_water_meas = !is.na(chl_water), chl_meas=!is.na(chl)) %>%
unite("obsscheme", chl_water_meas, chl_meas) %>%
mutate(obsscheme=fct_recode(obsscheme,obs1="TRUE_FALSE", obs2="FALSE_TRUE", obs3="TRUE_TRUE")) %>%
arrange(time_elapsed)
glimpse(dorig)
dorig %>% filter(obsscheme=='type3')
# include posterior mean in figure
pm <- read_csv("~/.julia/dev/DataFusion/csv/postmean_paths.csv", col_names = FALSE)
d <- d %>% mutate(postmean=rep(pm$X1,2)) %>%  mutate(t1 = time_elapsed %% 1)
pl2 <- d %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.9) +
facet_wrap(~meastype,ncol=1,scales='free') + ylab("concentration") +
geom_path(mapping=aes(x=time_elapsed,y=postmean),colour='black',size=0.3,alpha=0.8)
pl2
pm
# include posterior mean in figure
pm <- read_csv("~/.julia/dev/DataFusion/csv/postmean_paths.csv", col_names = FALSE) %>% mutate(X1=exp(X1))
d <- d %>% mutate(postmean=rep(pm$X1,2)) %>%  mutate(t1 = time_elapsed %% 1)
pl2 <- d %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.9) +
facet_wrap(~meastype,ncol=1,scales='free') + ylab("concentration") +
geom_path(mapping=aes(x=time_elapsed,y=postmean),colour='black',size=0.3,alpha=0.8)
pl2
pdf("~/.julia/dev/DataFusion/figs/vis_data_fit.pdf",width=7,height=5)
pl2
dev.off()
# first 10 years
pl2a <- d %>% filter(time_elapsed<=10) %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) +
geom_point() +
ylab("concentration") +
geom_line(mapping=aes(x=time_elapsed,y=postmean),colour='black',size=0.6,alpha=0.8) +
geom_vline(xintercept=seq(0,10,by=1),col='grey')+theme(legend.position='bottom')
pl2a
pl2b <- d %>% filter(time_elapsed>35) %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) +
geom_point() +
ylab("concentration") +
geom_line(mapping=aes(x=time_elapsed,y=postmean),colour='black',size=0.6,alpha=0.8) +
geom_vline(xintercept=seq(35,43,by=1),col='grey')+theme(legend.position='bottom')
pl2b
pl3 <- d %>% ggplot(aes(x=time_elapsed, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.9) +
ylab("concentration") +
geom_path(mapping=aes(x=time_elapsed,y=postmean),colour='black',size=0.3,alpha=0.8) + theme(legend.position="bottom")
pl3
pl4 <- d  %>% ggplot(aes(x=t1, y=y,colour=meastype)) + geom_point(size=0.6,alpha=0.9) +
geom_smooth(colour='blue') + facet_wrap(~meastype)+
xlab("time elapsed") + ylab("concentration") + geom_hline(yintercept = 0)+
geom_point(aes(x=t1,y=postmean),size=0.3, colour='black')
